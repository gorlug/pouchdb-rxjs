// @ts-ignore
import PouchDB from "pouchdb-browser";
// @ts-ignore
import pouchdb_authentication from "pouchdb-authentication";
import { of, Subject, throwError } from "rxjs";
import { catchError, concatMap } from "rxjs/operators";
import { fromPromise } from "rxjs/internal-compatibility";
import { Logger } from "./Logger";
PouchDB.plugin(pouchdb_authentication);
export class PouchDBWrapper {
    constructor() {
        this.docSaved$ = new Subject();
        this.docDeleted$ = new Subject();
    }
    static loadLocalDB(name, generator, log) {
        log = log.start(this.getLogName(), "loadLocalDB loading local db", { name: name });
        const wrapper = new PouchDBWrapper();
        wrapper.generator = generator;
        wrapper.db = new PouchDB(name);
        return log.addTo(of(wrapper));
    }
    static destroyLocalDB(name, log) {
        log = log.start(this.getLogName(), "destroyLocalDB destroying local db", { name: name });
        const db = new PouchDB(name);
        return log.addTo(fromPromise(db.destroy())).pipe(catchError(error => {
            log.logError(this.getLogName(), "destroyLocalDB error", "error during delete", { error: error });
            return throwError(error);
        }), concatMap(result => {
            log.logMessage(this.getLogName(), "destroyLocalDB response", { response: result.value });
            return of(result);
        }));
    }
    static getLogName() {
        return "PouchDBWrapper";
    }
    static loadExternalDB(conf, log) {
        log = log.start(this.getLogName(), "loadExternalDB loading external db", conf.getDebugInfo());
        const wrapper = new PouchDBWrapper();
        wrapper.generator = conf.generator;
        wrapper.url = conf.toUrl();
        const db = new PouchDB(conf.toUrl(), {
            skip_setup: true,
            fetch(url, opts) {
                opts.credentials = "include";
                return PouchDB.fetch(url, opts);
            },
            auth: {
                username: conf.credentials.username,
                password: conf.credentials.password
            }
        });
        wrapper.db = db;
        return log.addTo(of(wrapper));
    }
    static syncDBs(firstDB, secondDB, log) {
        log.logMessage(this.getLogName(), "syncDBs initiating sync", { firstDB: firstDB.getDebugInfo({}), secondDB: secondDB.getDebugInfo({}) });
        return PouchDB.sync(firstDB.getPouchDB(), secondDB.getPouchDB(), { live: true, retry: true })
            .on("change", change => {
            try {
                this.onSyncChange(firstDB, secondDB, change);
            }
            catch (e) {
                log.logError(this.getLogName(), "onSyncChange error", e + "", e);
            }
        })
            .on("error", error => {
            log.logError(this.getLogName(), "syncDBs error", error + "", error);
        });
    }
    static onSyncChange(firstDB, secondDB, info) {
        if (!info.change.docs) {
            return;
        }
        let targetDB;
        if (info.direction === "push") {
            targetDB = secondDB;
        }
        else if (info.direction === "pull") {
            targetDB = firstDB;
        }
        const log = Logger.getLoggerTrace().start(this.getLogName(), "onSyncChange received a sync change", { direction: info.direction, length: info.change.docs.length });
        const generator = targetDB.getGenerator();
        this.emitDocChanges(info.change.docs, targetDB, generator, log);
        log.complete();
    }
    static emitDocChanges(docs, db, generator, log) {
        docs.forEach((doc) => {
            if (doc._deleted) {
                db.docDeleted$.next(log.addToValue({ _id: doc._id }));
                return;
            }
            const document = generator.fromJSON(doc);
            db.docSaved$.next(log.addToValue(document));
        });
    }
    replicateTo(to, log) {
        log = log.start(PouchDBWrapper.getLogName(), "replicateTo replicating data to another db", { from: this.getDebugInfo(), to: to.getDebugInfo() });
        return log.addTo(fromPromise(PouchDB.replicate(this.db, to.getPouchDB())
            .on("change", info => {
            console.log("change info", info);
            log.logMessage(PouchDBWrapper.getLogName(), "replicateTo replication change", { from: this.getDebugInfo(), to: this.getDebugInfo(), length: info.docs.length });
            if (info.docs) {
                PouchDBWrapper.emitDocChanges(info.docs, to, to.getGenerator(), log);
            }
            log.complete();
        })));
    }
    getPouchDB() {
        return this.db;
    }
    getDebugInfo(params = {}) {
        const info = {
            db: this.url
        };
        for (const key in params) {
            if (params.hasOwnProperty(key)) {
                info[key] = params[key];
            }
        }
        return info;
    }
    logStart(dsc, log, doc) {
        return log.start(PouchDBWrapper.getLogName(), dsc, this.getDebugInfo({ doc: doc.getDebugInfo() }));
    }
    saveDocument(document, log) {
        log = this.logStart("saveDocument", log, document);
        const json = document.toDocument();
        if (json._rev == null) {
            delete json._rev;
        }
        return log.addTo(fromPromise(this.db.put(json)).pipe(catchError(errorResult => {
            log.logMessage(PouchDBWrapper.getLogName(), "saveDocument failed to save document", errorResult);
            log.complete();
            return throwError(errorResult.message);
        }), concatMap((result) => {
            if (result.ok) {
                document.updateRev(result.rev);
            }
            this.docSaved$.next(log.addToValue(document));
            return of(document);
        })));
    }
    handleGetDocument404Error(result, id, log) {
        const errorMsg = `document with id ${id} was not found`;
        log.logError(PouchDBWrapper.getLogName(), "getDocument error", errorMsg, this.getDebugInfo({ id: id, result: result }));
        return throwError(errorMsg);
    }
    handleGetDocumentError(result, id, log) {
        log.complete();
        if (result.status === 404) {
            return this.handleGetDocument404Error(result, id, log);
        }
        const errorMsg = "unknown error occurred";
        log.logError(PouchDBWrapper.getLogName(), "getDocument error", errorMsg, this.getDebugInfo({ id: id, result: result }));
        return throwError(errorMsg);
    }
    getDocument(id, log) {
        log = log.start(PouchDBWrapper.getLogName(), "getDocument getting document", this.getDebugInfo({ id: id }));
        return log.addTo(fromPromise(this.db.get(id)).pipe(catchError(result => {
            return this.handleGetDocumentError(result, id, log);
        }), concatMap(result => {
            return of(this.generator.fromJSON(result));
        })));
    }
    getAllDocuments(log) {
        log = log.start(PouchDBWrapper.getLogName(), "getAllDocuments " +
            "getting all documents of db", this.getDebugInfo({}));
        return log.addTo(fromPromise(this.db.allDocs({ include_docs: true })).pipe(concatMap((response) => {
            return this.createDocumentListFromResponse(response, log);
        })));
    }
    createDocumentListFromResponse(response, log) {
        const list = [];
        response.rows.forEach(row => {
            list.push(this.generator.fromJSON(row.doc));
        });
        log.logMessage(PouchDBWrapper.getLogName(), "getAllDocuments created document" +
            "list", this.getDebugInfo({ length: list.length }));
        return of(list);
    }
    deleteDocument(document, log) {
        log = log.start(PouchDBWrapper.getLogName(), "deleteDocument deleting a document", this.getDebugInfo({ doc: document.getDebugInfo() }));
        return log.addTo(fromPromise(this.db.remove(document.toDocument())).pipe(concatMap((response) => {
            return this.markDocumentForDeletion(document, response, log);
        })));
    }
    markDocumentForDeletion(document, response, log) {
        this.docDeleted$.next(log.addToValue({ _id: document.getId() }));
        document.updateRev(response.rev);
        log.logMessage(PouchDBWrapper.getLogName(), "deleteDocument new doc rev", this.getDebugInfo({ rev: response.rev }));
        log.complete();
        return of(document);
    }
    getGenerator() {
        return this.generator;
    }
    listenToChanges(log) {
        const silent = log.getSilent();
        log.logMessage(PouchDBWrapper.getLogName(), "listenToChanges listening to changes start", this.getDebugInfo());
        return this.db.changes({
            since: "now",
            live: true,
            include_docs: true
        }).on("change", change => {
            log = Logger.getLoggerTrace();
            log.setSilent(silent);
            log.logMessage(PouchDBWrapper.getLogName(), "listenToChanges on change", this.getDebugInfo({ length: change.changes.length }));
            if (change.changes.length === 1) {
                PouchDBWrapper.emitDocChanges([change.doc], this, this.generator, log);
            }
        }).on("error", error => {
            log.logError(PouchDBWrapper.getLogName(), "listenToChanges error", error + "", error);
        });
    }
}
//# sourceMappingURL=data:application/json;base64,