"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("./Logger");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const LOG_NAME = "PouchDBDocumentList";
class PouchDBDocumentList {
    constructor() {
        this.listContent$ = new rxjs_1.BehaviorSubject({ value: [], log: Logger_1.Logger.getLoggerTrace() });
        this.items = [];
        this.log = Logger_1.Logger.getLogger("PouchDBDocumentList");
    }
    getCurrentIndexOfItem(item, log) {
        log = log.start(LOG_NAME, "getCurrentIndexOfItem", item.getDebugInfo());
        return rxjs_1.Observable.create(emitter => {
            const currentIndex = this.items.indexOf(item);
            log.logMessage(LOG_NAME, "getCurrentIndexOfItem item has index", { item: item.getDebugInfo(), index: currentIndex });
            log.addToSubscriberNextAndComplete(emitter, currentIndex);
        });
    }
    moveUp(item, log) {
        const logStart = log.start(LOG_NAME, "moveUp", item.getDebugInfo());
        return this.getCurrentIndexOfItem(item, log).pipe(operators_1.concatMap(result => {
            result.log.complete();
            const currentIndex = result.value;
            if (currentIndex >= 0) {
                const newIndex = currentIndex - 1;
                console.log("newIndex", newIndex);
                this.moveItem(currentIndex, newIndex, item, logStart);
            }
            logStart.complete();
            return logStart.addTo(rxjs_1.of(item));
        }));
    }
    moveItem(currentIndex, newIndex, item, log) {
        log.logMessage(LOG_NAME, "move item", {
            currentIndex: currentIndex,
            newIndex: newIndex,
            item: item.getDebugInfo()
        });
        this.items.splice(currentIndex, 1);
        this.items.splice(newIndex, 0, item);
    }
    moveDown(item, log) {
        const run = log.start(LOG_NAME, "moveDown", item.getDebugInfo());
        return this.getCurrentIndexOfItem(item, log).pipe(operators_1.concatMap(result => {
            result.log.complete();
            const currentIndex = result.value;
            if (currentIndex < this.items.length - 1) {
                const newIndex = currentIndex + 1;
                this.moveItem(currentIndex, newIndex, item, run);
            }
            run.complete();
            return run.addTo(rxjs_1.of(item));
        }));
    }
    addItemAtIndex(index, item, log) {
        log = log.start(LOG_NAME, "addItemAtIndex", { item: item.getDebugInfo(), index: index });
        return rxjs_1.Observable.create(emitter => {
            this.addItemToListAtIndex(index, item, log);
            log.addToSubscriberNextAndComplete(emitter, item);
        });
    }
    addItemToListAtIndex(index, item, log) {
        this.items.splice(index, 0, item);
        this.itemAddedEvent(log);
    }
    pushItem(item, log) {
        this.items.push(item);
        this.itemAddedEvent(log);
    }
    itemAddedEvent(log) {
        this.listContent$.next(log.addToValue(this.items));
        this.sort();
    }
    sort() { }
    addOrUpdateItem(item, log) {
        log = log.start(LOG_NAME, "addOrUpdateItem", item.getDebugInfo());
        return rxjs_1.Observable.create(emitter => {
            let existingIndex = -1;
            let existingItem = null;
            this.items.filter((listItem, index) => {
                if (item.getId() === listItem.getId()) {
                    existingIndex = index;
                    existingItem = listItem;
                }
            });
            if (existingIndex !== -1) {
                this.deleteItem(existingItem, log).pipe(operators_1.concatMap(result => this.addItemAtIndex(existingIndex, item, result.log))).subscribe(emitter);
            }
            else {
                log.logMessage(LOG_NAME, "addOrUpdateItem pushing as new item", item.getDebugInfo());
                this.pushItem(item, log);
                log.addToSubscriberNextAndComplete(emitter, item);
            }
        });
    }
    getItems(log) {
        const items = this.items;
        log = log.start(LOG_NAME, "getItems", { length: items.length });
        return log.addTo(rxjs_1.of(items));
    }
    addItem(item, log) {
        log = log.start(LOG_NAME, "addItem", item.getDebugInfo());
        return rxjs_1.Observable.create(emitter => {
            this.addItemToList(item, log);
            log.addToSubscriberNextAndComplete(emitter, log);
        });
    }
    addItemToList(item, log) {
        log.logMessage(LOG_NAME, "addItemToList", item.getDebugInfo());
        this.pushItem(item, log);
    }
    addItemAtBeginning(item, log) {
        log.logMessage(LOG_NAME, "addItemAtBeginning", item.getDebugInfo());
        return this.addItemAtIndex(0, item, log);
    }
    deleteItem(itemToDelete, log) {
        log = log.start(LOG_NAME, "deleteItem", itemToDelete.getDebugInfo());
        return rxjs_1.Observable.create(emitter => {
            this.items = this.items.filter(item => {
                return !this.isTheSameCheck(item, itemToDelete);
            });
            log.logMessage(LOG_NAME, "deleteItem remaining item length", { length: this.items.length });
            this.listContent$.next(log.addToValue(this.items));
            log.addToSubscriberNextAndComplete(emitter, itemToDelete);
        });
    }
    isTheSameCheck(item, value) {
        return item.isTheSameDocumentAs(value);
    }
    addUniqueItem(item, log) {
        log = log.start(LOG_NAME, "addUniqueItem", item.getDebugInfo());
        return rxjs_1.Observable.create(emitter => {
            const filtered = this.items.filter((value) => {
                this.isTheSameCheck(item, value);
                log.logMessage(LOG_NAME, "addUniqueItem item is already added", item.getDebugInfo());
                log.addToSubscriberNextAndComplete(emitter, false);
            });
            if (filtered.length === 0) {
                this.addItem(item, log).subscribe((result) => result.log.addToSubscriberNextAndComplete(emitter, true), error => emitter.error(error), () => { });
            }
        });
    }
    getSize(log) {
        log = log.start(LOG_NAME, "getSize");
        return rxjs_1.Observable.create(emitter => {
            const size = this.items.length;
            log.logMessage(LOG_NAME, "getSize", { size: size });
            log.addToSubscriberNextAndComplete(emitter, size);
        });
    }
    getItemAtIndex(index, log) {
        log = log.start(LOG_NAME, "getItemAtIndex", { index: index });
        return rxjs_1.Observable.create(emitter => {
            if (index >= this.items.length) {
                const errorMessage = `index ${index} is greater than the available number of items ${this.items.length}`;
                log.logErrorAndSendSubscriberErrorComplete(emitter, LOG_NAME, "getItemAtIndex", errorMessage, { index: index, length: this.items.length });
            }
            const item = this.items[index];
            this.log.logMessage(LOG_NAME, "getting item at index", { item: item.getDebugInfo(), index: index });
            log.logMessage(LOG_NAME, "getItemAtIndex item is", { item: item.getDebugInfo(), index: index });
            log.addToSubscriberNextAndComplete(emitter, item);
        });
    }
    subscribeTo(db, log) {
        const logStart = log.start(LOG_NAME, "subscribeTo", db.getDebugInfo());
        return db.getAllDocuments(log).pipe(operators_1.concatMap(result => this.loadInitialItems(result)), operators_1.concatMap(result => this.initializeSubscriptions(result, db)), operators_1.concatMap(() => {
            return logStart.addTo(rxjs_1.of(db));
        }));
    }
    loadInitialItems(result) {
        const items = result.value;
        const log = result.log.start(LOG_NAME, "loadInitialItems", { length: items.length });
        items.forEach((item) => {
            this.addItemToList(item, result.log);
        });
        log.complete();
        return rxjs_1.of(log);
    }
    initializeSubscriptions(log, db) {
        this.subscribeToDocSaved(db, log);
        this.subscribeToDocDeleted(db, log);
        return rxjs_1.of(log);
    }
    subscribeToDocSaved(db, log) {
        log.logMessage(LOG_NAME, "subscribeToDocSaved", db.getDebugInfo());
        db.docSaved$.subscribe((next) => {
            const doc = next.value;
            const logStart = next.log.start(LOG_NAME, "subscribeToDocSaved adding new saved document " +
                "at beginning", doc.getDebugInfo());
            this.addItemToListAtIndex(0, doc, log);
            logStart.complete();
        }, error => {
            Logger_1.Logger.getLoggerTraceWithDB(log.getLogDB()).logError(LOG_NAME, "something went wrong while subscribing to new documents " +
                "being added", error + "", { error: error });
        });
    }
    subscribeToDocDeleted(db, log) {
        log.logMessage(LOG_NAME, "subscribeToDocDeleted");
        db.docDeleted$.pipe(operators_1.concatMap(next => {
            const deletedDoc = next.value;
            next.log.start(LOG_NAME, "subscribeToDocDeleted doc was deleted", deletedDoc);
            return this.deleteDeletedItem(deletedDoc, next.log);
        })).subscribe(next => {
            next.log.complete();
        }, error => {
            Logger_1.Logger.getLoggerTraceWithDB(log.getLogDB()).logError(LOG_NAME, "something went wrong while deleting document from db", error + "", error);
        });
    }
    deleteDeletedItem(deletedItem, log) {
        log = log.start(LOG_NAME, "deleteDeletedItem", deletedItem);
        return rxjs_1.Observable.create(emitter => {
            this.items = this.items.filter(item => {
                return item.getId() !== deletedItem._id;
            });
            this.listContent$.next(log.addToValue(this.items));
            log.addToSubscriberNextAndComplete(emitter, deletedItem);
        });
    }
}
exports.PouchDBDocumentList = PouchDBDocumentList;
//# sourceMappingURL=data:application/json;base64,